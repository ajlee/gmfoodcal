<?php

use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Session\AccountInterface;
use \Drupal\Core\Access\AccessResult;
use \Drupal\Core\Language;
use \Drupal\node\Entity\NodeType;
use \Drupal\Core\Link;
use \Drupal\Core\Url;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\views\ViewExecutable;
use \Drupal\Core\Database\Query\AlterableInterface;
use \Drupal\node\Entity\Node;

/*
 * uses hook_fullcalendar_classes
 */
function gmfood_general_fullcalendar_classes($entity) {
  //kint($entity->field_calendar);
  //kint($entity->field_calendar[0]);
  //kint($entity->field_calendar[0]->entity);
  $calendar_class = '';
  $calendar_class_id = '';
  $max_length = 32;


  //kint(is_object($entity->field_calendar));

  // check the calendar field is valid
  if(isset($entity->field_calendar_colour) && is_object($entity->field_calendar_colour) && !$entity->field_calendar_colour->isEmpty() && is_object($entity->field_calendar_colour[0]->entity)) {
    // get transliteration service
    $tr = \Drupal::service('transliteration');
    //kint($entity->field_calendar[0]->entity->getTitle());

    // get the related calendar
    // NOTE: in the case of multiple calendars being referenced, it will pick the first one
    $calendar_title = t($entity->field_calendar_colour[0]->entity->getTitle());

    $calendar_field = $entity->field_calendar_colour[0]->entity->get('field_calendar_serial');
    if (!empty($calendar_field)) {
      $calendar_id = $calendar_field[0]->value;
      $calendar_class_id = 'fc-calendar-' . $calendar_id;
    }
    // kint('serial');
    // kint($calendar_id[0]->value);
    //kint($calendar_id[0]);

    // get default language
    $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // remove problematic chars
    $sanitised = $tr->transliterate($calendar_title, $lang_code, $max_length);

    // replace spaces with hypens and lower case string
    $clean_string =  preg_replace('/\-+/', '-', strtolower(preg_replace('/[^a-zA-Z0-9_-]+/', '', str_replace(' ', '-', $sanitised))));
    $calendar_class = 'fc-' . $clean_string;

  }
  // Add the entity type as a class.
  return [
    $entity->entity_type,
    $calendar_class,
    $calendar_class_id
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function gmfood_general_entity_extra_field_info() {
  $extra = array();

  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->Id()]['display']['read_more'] = array(
      'label' => t('Read More Link'),
      'description' => t('Displays a read more link to the content'),
      'weight' => 100,
      'visible' => TRUE,
    );
  }

  return $extra;
}

function gmfood_general_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  //kint($entity->getType());
  //kint($build);
  $valid_types = [ 'event' ];
  if (in_array($entity->getType(), $valid_types)) {
    if ($display->getComponent('read_more')) {
        $url = Url::fromRoute('entity.node.canonical', array('node' => $entity->id()));
        $build['read_more_1'] = [
          '#type' => 'link',
          '#url' => $url,
          '#title' => t('Read More'),
          '#weight' => -5,
          '#attributes' => [
            'class' => 'btn btn-primary event__read-more-link'
          ],
        ];
        $build['read_more_2'] = [
          '#type' => 'link',
          '#url' => $url,
          '#title' => t('Read More'),
          '#weight' => 50,
          '#attributes' => [
            'class' => 'btn btn-primary event__read-more-link'
          ],
      ];
    }
  }
}

/*
 * Uses hook_form_alter
 * $form: Nested array of form elements that comprise the form.
 *
 * $form_state: The current state of the form. The arguments that \Drupal::formBuilder()->getForm() was originally called
 * with are available in the array $form_state->getBuildInfo()['args'].
 * $form_id: String representing the name of the form itself. Typically this is the name of the function that generated the
 * form.
 */
function gmfood_general_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  // check its the node_event_form
  if (in_array($form_id,['node_event_form'])){
    // check the forms have the right fields
    if (is_array($form['field_event_dates']) && is_array($form['field_event_dates']['widget']['add_more'])) {
      // change the label for the add more field
      $form['field_event_dates']['widget']['add_more']['#value'] = t('Add another date');
      // change the label for the save field
      $form['actions']['submit']['#value'] = t('Publish this Event');
      $form["#attached"]["library"][] = 'gmfood_general/auto_event_end_date';
    }
  }
}


/**
 * Implements hook_query_TAG_alter().
 */
function gmfood_general_query_search_node_search_alter(AlterableInterface $query) {

  $current_path = \Drupal::service('path.current')->getPath();
  $current_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  if($current_alias == '/search/events') {
    // Only show article and blogpost content in the search results.
    $query->condition('n.type', ['event'], 'IN');
    kint($query);
    //kint($query->having);
    //kint($query->fields);
    //kint($query->condition);
  }
  else if($current_alias == '/search/node') {
    // Only show article and blogpost content in the search results.
    $query->condition('n.type', ['article', 'event', 'page', 'news_link'], 'IN');
  }
  else if($current_alias == '/search/user') {
    // Only show article and blogpost content in the search results.
    // TODO: filter some users
    // by active, admin, public
    // permissions to do this limited?
  }
}

function gmfood_general_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  $type = $node->bundle();
  $current_user = $account->id();
  //kint($type);

  if ($account->hasPermission("moderate authorised events")) {
    //
    // check for calendar content
    //
    if(in_array($type,array('calendar'))) {
      switch ($op) {
        case 'create':
          return AccessResult::neutral();
        case 'update':
          $calendar_mods[] = array();
          $moderators = $node->get('field_moderator');

          foreach ($moderators as $key => $moderator) {
            $calendar_mods[] = $moderator->getValue()['target_id'];
          }
          if (in_array($current_user,$calendar_mods)) {
            return AccessResult::allowed()
              ->cachePerPermissions();
          }
        default:
          // No opinion - anything else like delete or view is not part of this module
          return AccessResult::neutral();
      }
    }
    //
    // Permissions for event item
    //
    if(in_array($type,array('event'))) {
      switch ($op) {
        // public can create event and event date nodes,
        // but this is controlled by the permissions page
        // so this module has no opinion on it
        case 'create':
          return AccessResult::neutral();
        case 'update':
          // get the mods for the event
          $calendar_mods = get_moderators_from_event($node);
          // is user in the list of mods for the calendar?
          if (in_array($current_user,$calendar_mods)) {
            //kint('access granted');
            return AccessResult::allowed()
              ->cachePerPermissions();
          }
        default:
          // No opinion - anything else like delete or view is not part of this module
          return AccessResult::neutral();
      }
    }


    //
    // Permissions for event_date item
    //
    if(in_array($type,array('event_date'))) {
      switch ($op) {
        // public can create event and event date nodes,
        // but this is controlled by the permissions page
        // so this module has no opinion on it
        case 'create':
          return AccessResult::neutral();
        case 'update':
          // get the event that this event_date is part of
          $calendar_mods = get_moderators_from_event_date($node);
          // is user in the list of mods
          if (in_array($current_user,$calendar_mods)) {
            return AccessResult::allowed()
              ->cachePerPermissions();
          }
        default:
          // No opinion - anything else like delete or view is not part of this module
          return AccessResult::neutral();
      }
    }
  }
  return AccessResult::neutral();
}


/*
 * function to return an array of moderator IDs from an event_date node
 */
function get_moderators_from_event_date(Node $node) {
  $referenced_entity_type = 'node';
  $calendar_mods = null;

  if($node->getType() == 'event_date') {
    $referencing_entities = \Drupal::service('entity_type.manager')
      ->getStorage($referenced_entity_type)
      ->load($node->id())
      ->get('reverse_entity_reference')
      ->getValue();

    foreach ($referencing_entities as $key => $referencing_entity) {
      //kint($referencing_entity);
      $event = Node::Load($referencing_entity['target_id']);
      if($event->getType() == 'event') {
        //kint('got event');

        // TODO: turn this into a function
        $calendar_mods = get_moderators_from_event($event);
        // kint('event date mods');
        //kint($calendar_mods);
      }
    }
  }
  return $calendar_mods;
}

/*
 * function to return an array of moderator IDs from an event node
 */
function get_moderators_from_event(Node $node) {
  $calendar_mods = array();

  //kint('get mod from event');
  //kint($node);
  if($node->getType() == 'event') {
    $calendar = $node;
    $calendar = $node->get('field_calendar')[0]->entity;
    $moderators = $calendar->get('field_moderator');
    //kint($moderators);
    //kint($moderators->count());

    foreach ($moderators as $key => $moderator) {
      //kint($moderator);
      //kint($moderator->getValue());
      $calendar_mods[] = $moderator->getValue()['target_id'];
      //kint('mod id');
      //kint($moderator->getValue()['target_id']);
      //kint('account id');
      //kint($account->id());
    }
  }
  return $calendar_mods;
}



/**
 * Implements hook_entity_view_mode_alter().
 */
/*
function gmfood_general_preprocess_page(&$variables) {
 // kint($variables['node']);


    // Get the current URL and cut in parts you can later check more easily.
    $current_uri = \Drupal::request()->getRequestUri(); // '/url/node1/rss'
    //$current_uri = ltrim($current_uri, '/'); // 'url/node1/rss'

    // RIGHT TRIM
    $url_array = explode('/', $current_uri); // array [ url, node1, rss ]
    $last_part = array_pop($url_array); // rss

    // is the last part of the URL rss, ical or json
    if (in_array($last_part, array('rss', 'ical', 'json'))){

      $url_alias = implode('/', $url_array); // 'url/node1'
      $langcode = 'en';

      // does url/node1 match some content
      //kint($current_uri);
      //kint($url_alias);
      $system_path = \Drupal::service('path.alias_manager')->getPathByAlias($url_alias, $langcode);

      kint($system_path);
      // change to node?
      $new_url = Url::fromUri("internal:" . $system_path);
      kint($new_url);

      // is it a node url?
      // if not it will trigger an exception and will run the catch () section
      try {
        // is it a node url
        if($new_url->getRouteName() == 'entity.node.canonical') {
          $node_id = $new_url->getRouteParameters('node');
          $parent_node = \Node::Load($node_id);
          $parent_type = $parent_node->getType();
          if($parent_type == 'calendar') {

          }
        }
      }
      catch(Exception $e) {
        kint('catch');
      }
      //$params = $new_url->getRouteParameters();

      //$entity_type = key($params);
      //$node = \Drupal::entityTypeManager()->getStorage($entity_type)->load($params[$entity_type]);
      //kint($params);

       $path_matches = \Drupal::service('path.matcher')->matchPath($path, $patterns);
      // Check URL to match a certain pattern, and switch the view mode.
      if ($arg[0] === 'url' && $arg[1] === 'alias2' && $arg[2] === 'path') {
        $view_mode = 'teaser';
      }
    }

}
*/
function gmfood_general_preprocess_user(&$variables) {

  // set up variables
  $logged_in_user = \Drupal::currentUser();
  $user_page = $variables['user'];
  $variables['is_users_own_profile'] = FALSE;

  // is the user's profile publicly visible?
  // this is a psuedo-permission set on the /admin/people/permissions page
  $variables['publicly_visible'] = $user_page->hasPermission('Profile is publicly visible');

  // if the logged in user IS the user whose profile is being displayed
  if (!empty($logged_in_user)) {
    if ($logged_in_user->id() == $user_page->id()) {
      $variables['is_users_own_profile'] = TRUE;
    }
  }
}


function gmfood_general_user_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {

  // current user
  $logged_in_user = \Drupal::currentUser();

  // if the logged in user is NOT the user whose profile is being displayed
  if (!empty($logged_in_user)) {
    if ($logged_in_user->id() != $entity->id()) {
      // hide fields from public view
      // TODO: add some fields here!
    }
  }
}
//
// uses function hook_menu_local_tasks_alter
// https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Menu%21menu.api.php/function/hook_menu_local_tasks_alter/
//
function gmfood_general_menu_local_tasks_alter(&$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &$cacheability) {
  kint($data['tabs']);
  // change the title of the "Newsletter", view, and edit tabs on user profile
  $data['tabs'][0]['entity.user.canonical']['#link']['title'] = "View My Profile";
  $data['tabs'][0]['entity.user.edit_form']['#link']['title'] = "Edit My Profile";
  $data['tabs'][0]['simplenews.newsletter_subscriptions_user']['#link']['title'] = "My Newsletter Subscriptions";
}

//
// remove jquery datepicker - use browser native versions
//
function gmfood_general_js_alter(&$javascript) {
  unset($javascript['core/assets/vendor/jquery.ui/ui/widgets/datepicker-min.js']);
  unset($javascript['core/modules/locale/locale.datepicker.js']);
}
