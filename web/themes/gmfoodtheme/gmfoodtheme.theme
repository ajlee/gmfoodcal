<?php
use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * @file
 * Theme functions
 */
// Include all files from the includes directory.
$includes_path = dirname(__FILE__) . '/includes/*.inc';
foreach (glob($includes_path) as $filename) {
  require_once dirname(__FILE__) . '/includes/' . basename($filename);
}


/*
 * extends theme_preprocess_html()
 */
function gmfoodtheme_preprocess_html(&$variables) {

  // add node classes to the body
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $variables['attributes']['class'][] = 'page-node-' . $node->getType();
    $variables['attributes']['class'][] = 'page-node-' . $node->id();
  }
  else {
    $variables['attributes']['class'][] = 'page-no-node';
  }

  // add body classes for view pages
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if(!empty($view_id)) {
  $view = \Drupal\views\Views::getView($view_id);
    if (!empty($view_id)) {
     $variables['attributes']['class'][] = 'views-' . $view_id;
     $variables['attributes']['class'][] = 'view-page';
    }
  }
}

/*
 * extends theme_preprocess_node()
 */
function gmfoodtheme_preprocess_node(&$variables) {
  $referenced_entity_type = 'node';
  //kint($variables['node']);
  //kint($variables['node']->id());

  $node = $variables['node'];
  $type = $variables['node']->getType();
  $nid = $variables['node']->id();
  $view_mode = $variables['view_mode'];
  $variables['view_mode'] = $view_mode;

  if ($type == 'event') {
    $variables['edit_link'] = get_node_edit_link($nid);
  }


  //
  // Custom code for preprocessing event_dates
  //
  else if ($type == 'event_date'){

    // get the date in plain format
    $variables['date_time_plain'] = $node->get('field_inline_event_date')->getValue()[0]['value'];
    // kint('aaa');

    /*
     * Use reverse entity reference to find events referencing 'event_date' nodes
     * The 'event' node will be rendered on the twig template instead of the 'event_date' node
     */

    $moduleHandler = \Drupal::service('module_handler');
    if ($moduleHandler->moduleExists('reverse_entity_reference')){
      //kint('xxx');
      $referencing_entities = \Drupal::service('entity_type.manager')
        ->getStorage($referenced_entity_type)
        ->load($variables['node']->id())
        ->get('reverse_entity_reference')
        ->getValue();
      $variables['reverse_entity_reference'] = $referencing_entities;
      //kint($referencing_entities);

      // loop over all referencing entities
      // we are only interested in the event nodes though
      foreach($referencing_entities as $entity_ref) {
        //kint('yyy');

        if ($entity_ref['field_name'] == 'field_event_dates') {
          $event_node = Node::Load($entity_ref['target_id']);
          //kint($event_node->getType());

          if($event_node->getType() == 'event') {

            // use the same view mode as current node if its email plain or newsletter standard
            // otherwise use default
            $event_view_mode = 'full';
            if($view_mode == "email_plain" || $view_mode == "event_date_newsletter_standard_view") {
              $event_view_mode = $view_mode;
            }
            // build the node and pass it to the twig template
            $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
            $build = $view_builder->view($event_node, $event_view_mode);
            $html = \Drupal::service('renderer')->renderPlain($build);
            $variables['event_node'] = $html;
            $variables['event_node_title'] = $event_node->getTitle();
            $variables['event_node_edit_link'] = get_node_edit_link($event_node->id());
            break; // will take the first event node reference found
          }
        }
      }
    }
  }

  // Preprocessing newsletters
  else if ($type == "simplenews_issue") {
    if ($view_mode == 'full') {
      $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
      $build = $view_builder->view($node, 'email_plain');
      $html = \Drupal::service('renderer')->renderPlain($build);
      $variables['plain_text_newsletter'] = $html;
    }
  }

  // Preprocessing calendars
  else if ($type == "calendar") {
    if ($view_mode == 'full') {
      $variables['json_link'] = 'http://myamanita.tklapp.com/calendar/14/feed?_format=json';
      $variables['xml_link'] = 'http://myamanita.tklapp.com/calendar/14/feed?_format=xml';
    }
  }
}


/*
 * extends theme_preprocess_node()
 */
function gmfoodtheme_preprocess_menu(&$variables) {
  //kint($variables);
}

/*
 * extends theme_preprocess_page_title()
 *
 * simply replaces the page title with field_page_heading if it is set
 */
function gmfoodtheme_preprocess_page_title(&$variables) {
  $node = \Drupal::request()->attributes->get('node');
  if(!empty($node) && is_object($node) && $node->hasField('field_page_heading')) {
    if(!$node->get('field_page_heading')->isEmpty()){
      $subtitle = $node->get('field_page_heading')[0]->value;
      $variables['subtitle'] = $subtitle;
    }
  }
}

/*
 * Create an edit link from a node id
 */
function get_node_edit_link($nid) {
  /* create event edit link */
  $url = Url::fromRoute('entity.node.edit_form', ['node' => $nid]);
  $link = Link::fromTextAndUrl('edit', $url);
  $build = [
    'link' => $link->toRenderable(),
  ];
  return $build;
}


/*
 * uses hook_fullcalendar_classes
 */
function gmfood_theme_fullcalendar_classes($entity) {
  // Add the entity type as a class.
  return [
    $entity->entity_type,
  ];
}



function gmfoodtheme_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  /*kint ($form_id);
  kint ($form);
  kint ($form['#attributes']);
*/

  // add more templating suggestions
  foreach (\Drupal\Core\Render\Element::children($form) as $key) {
    $form[$key]['#attributes']['data-twig-suggestion'] = $form['#id'];
  }
  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form['#id'];


  // alter search block form
  if ($form_id == 'search_block_form') {
    $form['keys']['#size'] = 10;
    $form['keys']['#placeholder'] = 'Search for...';
    $form['actions']['#attributes']['class'][] = 'col-xs-12 col-md-4';
    $form['actions']['submit']['#value'] = t('Go');
    $form['#attributes']['class'][] = 'container';
  }
}


/*
 * extends hook_theme_suggestions_page_alter
 * set template for iframe pages
 */
function gmfoodtheme_theme_suggestions_page_alter(&$suggestions, array $variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $result = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  $iframe_page = '/page/iframe';
  if($result == $iframe_page) {
    $suggestions[] = array('iframe');
  }
}

/*
 * add more template suggestions for input fields
 */
function gmfoodtheme_theme_suggestions_input_alter(&$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestion_suffix = str_replace(['-'], '_', $element['#attributes']['data-twig-suggestion']);
    $suggestions[] = 'input__' . $element['#type'] . '__' . $suggestion_suffix;
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 */
function gmfoodtheme_theme_suggestions_container_alter(&$suggestions, array $variables) {
  $element = $variables['element'];

  if(isset($element['#type']) && $element['#type'] == 'actions') {
    $suggestions[] = 'container__' . $element['#type'];
  }

  if (isset($element['#type']) && $element['#type'] == 'view') {
    $suggestions[] = 'container__' . $element['#name'];
    $suggestions[] = 'container__' . $element['#name'] . '__' . $element['#display_id'];
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . $element['children']['#type'];
  }
}

/*
 * Impements hook_preprocess_views_view_fields
 */
function gmfoodtheme_preprocess_views_view_fields (&$variables) {
  $view_id = $variables['view']->id();
  $display = $variables['view']->current_display;

 // custom vars for the "recently added events" view
 if(in_array($view_id, array('recently_added_events'))) {
    $event_node = $variables['row']->_entity;
    $event_dates = $event_node->get('field_event_dates');

    // display dates differently on the block and on the page
    // block view
    if (strstr($display, 'block') !== FALSE) {
      // get the date field
      $event_date_detail = $event_dates[0]->entity->get('field_inline_event_date');
      // get a string
      $event_date_value = $event_date_detail[0]->date->format('d/m/Y H:i');
      // count the dates and use this info on twig template
      $no_of_dates = count($event_dates);
      $variables['no_of_dates'] = $no_of_dates;
      $variables['first_date_formatted'] = $event_date_value;
    }
    // page view
    else {
      $date_array = array();
      // get each date
      foreach ($event_dates as $key => $event_date) {
        $event_date_detail = $event_date->entity->get('field_inline_event_date');
        $date = $event_date_detail->date;
        if(!empty($date)) {
          // add date to the array
          $date_array[] = $date->format('l H:i d/m/Y');
        }
      }
      // turn array into a string
      $date_string = implode(', ', $date_array);
      // pass to twig template
      $variables['date_string'] = $date_string;
    }
  }
}

/*
 * uses hook theme_fullcalendar_event from fullcalendar module
 *
 */
/* function gmfoodtheme_fullcalendar_event(&$variables) {
  //kint('event');
}
*/
